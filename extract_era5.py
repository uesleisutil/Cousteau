#!/home/uesleisutil/anaconda3/bin/python python
# -*- coding: utf-8 -*-

"""
File name:      extract_era5.py
Author:         Ueslei Adriano Sutil
Email:          uesleisutil1@gmail.com
Created:        11 May 2019
Last modified:  11 May 2019
Version:        1.0
Python:         3.7.1

Given lat/lon coords, extract data from ERA5 and save in ASCII format: 
"""

# Import variables.
import netCDF4
import csv
import numpy    as np
from   datetime import date, timedelta
import pandas   as pd
from matplotlib.dates import date2num


# Select WRF latitude/longitude and time-step.
inittime = 0

lat_list = [-32.03532,-32.13991,-32.25957,-32.39389,-32.53222,-32.66625,-32.79542,-32.92707,-33.06374,-33.19984,
-33.33448,-33.47106,-33.6053,-33.75404,-33.90572,-34.06136,-34.21965,-34.37784,-34.53691,-34.70303,-34.8731,-35.04148,
-35.20785,-35.37561,-35.54871,-35.71843,-35.88812,-36.05397,-36.21752,-36.37858,-36.53737,-36.70057,-36.86873,-37.03984,
-37.2136,-37.38673,-37.56231,-37.73353,-37.9024,-38.06789,-38.19558,-38.22393,-38.22406,-38.22573,-38.33392,-38.44543,
-38.44981,-38.47318,-38.58058,-38.7054,-38.82251,-38.92452,-39.03825,-39.15609,-39.25522,-39.34981,-39.46372,-39.54832,
-39.54772,-39.55731,-39.63567,-39.74497,-39.85299,-39.96268,-39.97723,-39.96757,-40.05548,-40.21616,-40.37969,-40.5477,
-40.71619,-40.88744,-41.04349,-41.19137,-41.34091,-41.51204,-41.67282,-41.84319,-42.01699,-42.19932,-42.38087,-42.56576,
-42.74416,-42.91248,-43.0796,-43.24097,-43.37226,-43.50436,-43.65034,-43.79308,-43.93557,-44.0797,-44.18838,-44.28685,
-44.37586,-44.47137,-44.57103,-44.66163,-44.7534,-44.8381,-44.91924,-45.00803,-45.09323,-45.18604,-45.26423,-45.25877,
-45.25121,-45.23683,-45.27248,-45.18523,-45.21458,-45.21507,-45.22836,-45.12671,-45.06775,-45.06286,-45.00118,-44.88342,
-44.87854,-44.85451,-44.74389,-44.62509,-44.61615,-44.60232,-44.57692,-44.47252,-44.36685,-44.26957,-44.26534,-44.24712,
-44.15511,-44.05002,-43.96837,-43.9858,-43.91876,-43.80126,-43.70522,-43.71916,-43.59722,-43.47225,-43.44142,-43.45505,
-43.53242,-43.64018,-43.74984,-43.85821,-43.96266,-44.06101,-44.15417,-44.25684,-44.36699,-44.47625,-44.58881,-44.69574,
-44.81386,-44.92353,-45.02862,-45.13539,-45.24403,-45.35021,-45.45447,-45.56115,-45.66782,-45.77719,-45.885,-45.99212,
-46.09816,-46.21487,-46.33331,-46.45256,-46.57203,-46.69136,-46.80698,-46.92149,-47.03912,-47.1565,-47.27836,-47.39742,
-47.51705,-47.63815,-47.757,-47.8799,-48.00328,-48.1249,-48.24856,-48.37145,-48.49633,-48.62537,-48.7527,-48.88021,
-49.00432,-49.1269,-49.24777,-49.36991,-49.49128,-49.61552,-49.73886,-49.86688,-49.99471,-50.12767,-50.25346,-50.37697,
-50.49535,-50.61243,-50.73254,-50.85594,-50.98153,-51.10995,-51.23632]

lon_list = [-52.0769,-52.09957,-52.04209,-52.05254,-52.06517,-52.07243,-52.08176,-52.08892,-52.10125,-52.11044,-52.12119,
-52.13039,-52.14147,-52.14951,-52.16609,-52.18079,-52.1936,-52.20519,-52.2277,-52.23763,-52.25317,-52.2711,-52.29548,-52.30048,
-52.30607,-52.31746,-52.33558,-52.35786,-52.37864,-52.39428,-52.41127,-52.42244,-52.44318,-52.46282,-52.47275,-52.48957,-52.51523,
-52.54283,-52.5491,-52.55544,-52.57171,-52.57222,-52.57225,-52.57165,-52.72446,-52.88584,-52.89092,-52.91247,-53.08289,-53.24607,
-53.39408,-53.52849,-53.70055,-53.86035,-53.96568,-54.129,-54.2786,-54.39089,-54.39079,-54.39003,-54.5131,-54.66416,-54.81982,
-54.9671,-54.99479,-54.99456,-54.98722,-54.9652,-54.93742,-54.90772,-54.87816,-54.84919,-54.74988,-54.64165,-54.53196,-54.46671,
-54.38798,-54.33154,-54.26091,-54.19347,-54.11929,-54.05193,-53.9877,-53.9273,-53.86296,-53.83299,-53.70371,-53.56292,-53.43331,
-53.30382,-53.16985,-53.03735,-52.86804,-52.68257,-52.50045,-52.3393,-52.21909,-52.1108,-51.99618,-51.86005,-51.71456,-51.57654,
-51.42542,-51.28771,-51.15066,-51.17248,-51.18927,-51.15654,-51.22,-51.11809,-51.1506,-51.15077,-51.21634,-51.38141,-51.48083,
-51.48923,-51.59732,-51.76376,-51.77132,-51.80429,-51.98153,-52.15286,-52.14981,-52.13367,-52.18364,-52.35592,-52.52989,-52.69821,
-52.70464,-52.73407,-52.87868,-53.03102,-53.14711,-53.14192,-53.19324,-53.29435,-53.37503,-53.38289,-53.47182,-53.57636,-53.61224,
-53.63581,-53.75076,-53.90354,-54.05848,-54.21468,-54.36412,-54.50552,-54.6431,-54.7868,-54.94684,-55.10715,-55.26735,-55.43178,
-55.59316,-55.75638,-55.91186,-56.06876,-56.22331,-56.38103,-56.53837,-56.69371,-56.85365,-57.01438,-57.17509,-57.3338,-57.49324,
-57.66659,-57.84607,-58.02792,-58.20522,-58.3839,-58.56247,-58.73793,-58.9073,-59.09319,-59.27091,-59.45644,-59.63952,-59.82789,
-60.01157,-60.2005,-60.38943,-60.58163,-60.77087,-60.96245,-61.15794,-61.35692,-61.55914,-61.75955,-61.95647,-62.1485,-62.34153,
-62.5339,-62.72931,-62.92572,-63.12532,-63.32878,-63.53947,-63.74382,-63.95226,-64.1517,-64.34747,-64.53858,-64.73407,-64.93623,
-65.14359,-65.35428,-65.57052]

# ERA5 file and variables.
era5_dir = '/media/ueslei/Ueslei/INPE/Embarques/OP/OP38/op38dados/era5/era5.nc'
nc_file  = netCDF4.Dataset(era5_dir)

# Create loop resources;.
time       = nc_file.variables['time'][:]
base       = date(1900, 1, 1)
df         = pd.DataFrame(time, columns=['hours'])
df['date'] = df.hours.apply(lambda x: base + timedelta(hours=x))
df['date'] = pd.to_datetime(df['date'], errors='coerce')
df["date"] = df["date"].dt.strftime('%Y%m%d').astype(float)
range_loop = len(time)

# Create a variable with zeros to list the data throught loop.
slhf_list  = np.zeros([range_loop])
sshf_list  = np.zeros([range_loop])
sst_list   = np.zeros([range_loop])
time_list  = np.zeros([range_loop])

# Starting looping throught time.
for i in range(inittime,209,1):
    # Open ERA5 variables.
    sshf         = nc_file.variables['sshf'][i,lat_list[i],lon_list[i]]
    slhf         = nc_file.variables['slhf'][i,lat_list[i],lon_list[i]]
    sst          = nc_file.variables['sst'][i,lat_list[i],lon_list[i]]

    slhf_list[i] = slhf/3600 # J m**-2 to W m**-2
    sshf_list[i] = sshf/3600 # J m**-2 to W m**-2
    sst_list[i]  = sst-273.15 # K to C
    time_list[i] = df["date"][i]
 
    
    day       = str(df["date"][i])
    sensible  = str(round(sshf_list[i]))
    sst       = str(round(sst_list[i]))
    latent    = str(round(slhf_list[i]))
    longitude = str(round(lon_list[i]))
    latitude  = str(round(lat_list[i]))
    
    print(day+": Qlat is "+latent+", Qsen is "+sensible+" and SST is "+sst+" for Lat "+latitude+" and Lon "+longitude)

    # Update the IncrementalBar.

# Store the lists
rows = zip(time_list, slhf_list*-1,sshf_list*-1,sst_list)

# Save the variables in a CSV file
with open('./era5_output.csv', "w") as f:
    writer = csv.writer(f)
    for row in rows:
        writer.writerow(row)
        
